public class Solution_1 {
    
//no extra space and 10ms
public boolean exist(char[][] board, String word) {
    char[] w = word.toCharArray();
    for (int y=0; y<board.length; y++) {
        for (int x=0; x<board[y].length; x++) {
            if (exist(board, y, x, w, 0)) return true;
        }
    }
    return false;
}

private boolean exist(char[][] board, int y, int x, char[] word, int i) {
    if (i == word.length) return true;
    if (y<0 || x<0 || y == board.length || x == board[y].length) return false;
    if (board[y][x] != word[i]) return false;
    board[y][x] ^= 256;// ascii range <2^7
    boolean exist = exist(board, y, x+1, word, i+1)
        || exist(board, y, x-1, word, i+1)
        || exist(board, y+1, x, word, i+1)
        || exist(board, y-1, x, word, i+1);
    board[y][x] ^= 256;
    return exist;
}



}

// my implementation 23ms and extra space
class Solution_2 {
    int[][] dir ={{0,-1},{1,0},{0,1},{-1,0}};//left, down,right,up
   
   public boolean exist(char[][] board, String word) {
        if (board.length == 0 && board[0].length == 0) {
            return false;
        }
        boolean[][] visited = new boolean[board.length][board[0].length];

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == word.charAt(0)) {
                    visited[i][j] = true;
                    if (exists(board, word.substring(1, word.length()), visited, i, j)) {
                        return true;
                    }
                    visited[i][j] = false;
                }
            }
        }
        return false;
    }

    private boolean exists(char[][] board, String word, boolean[][] visited, int i, int j) {
        if (word.length() == 0) {
            return true;
        }

        for (int d = 0; d < dir.length; d++) {
            int x = dir[d][0];
            int y = dir[d][1];
            if (i + x >= 0 && i + x < board.length
                    && j + y >= 0 && j + y < board[0].length) {

                if (board[i + x][j + y] == word.charAt(0) && !visited[i + x][j + y]) {
                    visited[i + x][j + y] = true;
                    if(exists(board, word.substring(1, word.length()), visited, i + x, j + y)) {
                        return true;
                    }
                    visited[i + x][j + y] = false;                   
                }
            }
        }
        return false;
    }
}