//0ms
public class Solution {
    public int sumNumbers(TreeNode root) {
       return sumsToPath(root,0);
    }
    
    private int sumsToPath(TreeNode root, int currentSum) {
        if(root!=null) {
            if(root.left==null && root.right==null) {
                return currentSum*10+root.val;
            }
           return sumsToPath(root.left,currentSum*10+root.val) + sumsToPath(root.right,currentSum*10+root.val);
        }
        return 0;
    }
}

//2ms easy to understand with a list of sums of root to path
public class Solution {
    public int sumNumbers(TreeNode root) {
       List<Integer> sums = new ArrayList<>();
       sums.add(0);
       sumsToPath(root,sums,0);
       int sum = 0;
       for(Integer n:sums) {
           sum += n;
       }
       return sum;
    }
    
    private void sumsToPath(TreeNode root, List<Integer> sums, int currentSum) {
        if(root!=null) {
            sums.set(sums.size()-1,currentSum*10+root.val);
            if(root.left==null && root.right==null) {
                sums.add(0);
            }
            sumsToPath(root.left,sums,currentSum*10+root.val);
            sumsToPath(root.right,sums,currentSum*10+root.val);
        }
    }
}