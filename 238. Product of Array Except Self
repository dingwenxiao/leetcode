//Without division and in O(n).
public class Solution {
    public int[] productExceptSelf(int[] nums) {
        if(nums.length<=1) return nums;
        int[] leftArr = new int[nums.length];
        int[] rightArr = new int[nums.length];
        
        leftArr[0] = nums[0]; 
        for(int i=1;i<leftArr.length;i++) {
            leftArr[i] = nums[i]*leftArr[i-1];
        }
        
        rightArr[leftArr.length-1]=nums[nums.length-1];
        for(int i=nums.length-2;i>0;i--) {
            rightArr[i] = nums[i]*rightArr[i+1];
        }
        
        nums[0] = rightArr[1];
        nums[nums.length-1] = leftArr[nums.length-2];
        for(int j=1;j<nums.length-1;j++) {
            nums[j] = leftArr[j-1]*rightArr[j+1];
        }
        
        return nums;
    }
}

//Constant space
public class Solution {
    public int[] productExceptSelf(int[] nums) {
        if(nums.length<=1) return nums;
        int[] res = new int[nums.length];
        //left to right
        res[0] = 1; 
        for(int i=1;i<nums.length;i++) {
            res[i] = res[i-1]*nums[i-1];
        }
        
        //right to left
        int right=1;
        for(int i=nums.length-2;i>=0;i--) {
            right = right*nums[i+1];
            res[i] = right*res[i];
        }
        
        return res;
    }
}