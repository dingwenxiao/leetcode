
/**most elegant way to solve the problem, 1 round
 *time O(n)
 *Space O(1)
 */
public boolean increasingTriplet(int[] nums) {
        int min1 = Integer.MAX_VALUE;
        int min2 = Integer.MAX_VALUE;
        for(int i=0;i<nums.length;i++) {
            if(nums[i]<=min1) {
                min1 = nums[i];// smaller than minimum -> update minimum
            } else if(nums[i]<=min2){// bigger than minimum and less than less minimum -> update less minimum
                min2 = nums[i];
            } else {//greater than both minimum and less minimum
               return true;
            } 
        }
        return false;
    }



/**my solution-iterate two rounds: from start to end and from end down to start.
 * time O(2*n)=O(n)
 * Space O(1)
 */
public class Solution {
    public boolean increasingTriplet(int[] nums) {
        int min1 = Integer.MAX_VALUE;
        int min1_index = 0;
        int min2 = Integer.MAX_VALUE;
        int min2_index = 0;
        boolean firstRound = false;
        for(int i=0;i<nums.length;i++) {
            if(nums[i]<min1) {
                min1 = nums[i];
                min1_index = i;
            } else if(nums[i]>min2 && min2_index>min1_index){
                firstRound = true;
                break;
            } else if((min2_index<min1_index || nums[i]<min2) &&nums[i]>min1) {
                min2 = nums[i];
                min2_index = i;
            } 
        }
        
        boolean secondRound = false;
        int max1 = Integer.MIN_VALUE;
        int max1_index = 0;
        int max2 = Integer.MIN_VALUE;
        int max2_index = 0;
        for(int i=nums.length-1;i>0;i--) {
            if(nums[i]>max1) {
                max1 = nums[i];
                max1_index = i;
            } else if(nums[i]<max2 && max2_index<max1_index){
                secondRound = true;
                break;
            } else if((max2_index>max1_index || nums[i]>max2) &&nums[i]<max1) {
                max2 = nums[i];
                max2_index = i;
            } 
        }
        return firstRound||secondRound;
    }
}