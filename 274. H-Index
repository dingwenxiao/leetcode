/** 274 H-index
 * my solution - first sort, find the mid, then decide go left or go right
 * go left or go right with index in big step, then do slightly adjustment with  
 * increment +-1 in small steps
 */
public class Solution {
    public int hIndex(int[] citations) {
          if (citations.length == 0) {
            return 0;
        }

        Arrays.sort(citations);
        int np = citations.length / 2;
        if (citations[np] > citations.length - np) {
            while (np >= 0 && citations[np] > citations.length - np - 1) {
                np--;
            }

            if (np < 0) {
                np = citations.length;
            } else {
                int i = citations[np];
                while (i < citations.length - np-1 && i < citations[np + 1]) {
                    i++;
                }
                np = i;
            }

        } else if (citations[np] < citations.length - np) {
            while (np < citations.length && citations[np] < citations.length - np) {
                np++;
            }

            if (np == citations.length) {
                np = 0;
            } else {
                int j = citations[np];
                while (j > citations.length - np && j > citations[np - 1]) {
                    j--;
                }
                np = j;
            }
        } else {
            np = citations[np];
        }
        return np;
    }
}

/**
 * Bucket sort, smart solution
 *
 */

public int hIndex_2(int[] citations) {
        int L = citations.length;
        if (L < 1) {
            return 0;
        }
        int[] counts = new int[L + 1];
        for (int i : citations) {
            if (i > L) {
                counts[L]++;
            } else {
                counts[i]++;
            }
        }
        int res = 0;
        for (int k = L; k >= 0; k--) {
            res += counts[k];
            if (res >= k) {
                return k;
            }
        }
        return 0;
    }