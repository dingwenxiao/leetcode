/*First,greater than 0.
 *Second,only have one '1' bit in their binary notation,so we use x&(x-1) to delete   
 *the lowest '1',and if then it becomes 0,it prove that there is only one '1' bit.
 *Third,the only '1' bit should be locate at the odd location,for example,16.It's  
 *binary is 00010000.So we can use '0x55555555' to check if the '1' bit is in the 
 *right place.
 */
public boolean isPowerOfFour(int num) {
        return num > 0 && (num&(num-1)) == 0 && (num & 0x55555555) != 0;
        //0x55555555 is to get rid of those power of 2 but not power of 4
        //so that the single 1 bit always appears at the odd position 
}

// my solution 2ms 
public boolean isPowerOfFour(int num) {
        if (num <= 0) {
            return false;
        }
        if (num == 1) {
            return true;
        }
        int count = 0;
        int lowest = (int) (num & 1);
        boolean findFirst = false;
        while (num != 0) {
            lowest = (int) (num & 1);
            if (lowest == 1) {
                if (findFirst) {
                    return false;
                }
                findFirst = true;
            }

            num = num >> 1;
            if (!findFirst) {
                count++;
            }
        }
        return (count & 1) == 0;
    }