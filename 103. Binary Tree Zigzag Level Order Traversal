/**
 * 2ms, recursive solution
 *
 *
 */
public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
      
         List<List<Integer>> res = new ArrayList<>();
        if(root==null) return res;
        List<Integer> firstList = new ArrayList<>();
        firstList.add(root.val);
        res.add(firstList);
        zig(res,root,1);
        return res;
    }
    
    private void zig(List<List<Integer>> res, TreeNode root, int level) {
        if(root!=null) {
            if(res.size()<=level && (root.left!=null || root.right!=null)) {
                res.add(new ArrayList());
            }
            
            if(level%2==0) {
                if(root.left!=null) {
                    res.get(level).add(root.left.val);
                }
                
                if(root.right!=null) {
                    res.get(level).add(root.right.val);
                }
            } else {
                if(root.left!=null) {
                    res.get(level).add(0,root.left.val);
                }
                
                if(root.right!=null) {
                    res.get(level).add(0,root.right.val);
                }
            }
            zig(res,root.left,level+1);
            zig(res,root.right,level+1);
        }
    }

/**
 * my solution, Two stacks-even stack and odd stack, solution, 3ms
 *
 */
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }

        Stack<TreeNode> statck_even = new Stack<>();
        Stack<TreeNode> stack_odd = new Stack<>();

        stack_odd.push(root);
        while (!stack_odd.empty() || !statck_even.empty()) {
            List<Integer> oddlist = new ArrayList<>();
            while (!stack_odd.empty()) {
                TreeNode p1 = stack_odd.pop();
                oddlist.add(p1.val);
                if (p1.left != null) {
                    statck_even.add(p1.left);
                }
                
                if (p1.right != null) {
                    statck_even.add(p1.right);
                }
            }
            
            if(!oddlist.isEmpty()) {
                res.add(oddlist);
            }

            List<Integer> evenlist = new ArrayList<>();
            while (!statck_even.empty()) {
                TreeNode p2 = statck_even.pop();
                evenlist.add(p2.val);

                if (p2.right != null) {
                    stack_odd.add(p2.right);
                }
                
                if (p2.left != null) {
                    stack_odd.add(p2.left);
                }
            }
            if(!evenlist.isEmpty()) {
                res.add(evenlist);
            }
        }
        return res;
    }
}
