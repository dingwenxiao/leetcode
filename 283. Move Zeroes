// 1ms, insert position, most elegant solution
public class Solution {
    public void moveZeroes(int[] nums) {
        if(nums.length>1) {
            int insertPosition=0;
            for(int num:nums) {
                if(num!=0) nums[insertPosition++]=num;
            }
            
            while(insertPosition<nums.length) {
                nums[insertPosition++]=0;
            }
        }
    }
}


//2ms, two pointer, O(n)
public class Solution {
    public void moveZeroes(int[] nums) {
    	if(nums.length>1) {
        int zero_start = 0;
        int i = 0;

        while (i < nums.length && nums[i] != 0) {//find the start of 0
            i++;
        }
        zero_start = i;

        while (zero_start <= i && i<nums.length) {//i end of 0
            while (i < nums.length && nums[i] == 0) {
                i++;
            }
            
            if(zero_start<nums.length && i<nums.length) {
                nums[zero_start++] = nums[i];
                nums[i++] = 0;
            }
           
            while (zero_start <= i && nums[zero_start] != 0) {
                zero_start++;
            }
        }
       }
    }
}