//my 4ms solution beats 80%
public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        return nums1.length>nums2.length?intersection(nums1,nums2):intersection(nums2,nums1);
    }
    
    int[] intersection(int[] nums_long,int[] nums_short) {
        List<Integer> res = new ArrayList<>();
        for(int s=0,l=0;s<nums_short.length && l<nums_long.length;) {
            if(nums_long[l]==nums_short[s]) {
                res.add(nums_short[s]);
                s++;
                l++;
            } else if(nums_long[l]>nums_short[s]) {
                s++;
            } else {
                l++;
            }
        }
        int[] res_arr = new int[res.size()];
        for(int i=0;i<res.size();i++) {
            res_arr[i]=res.get(i);
        }
        return res_arr;
    }
}

//8ms solution in discussion
 public int[] intersect(int[] nums1, int[] nums2) {
        return nums1.length>nums2.length?intersection(nums1,nums2):intersection(nums2,nums1);
    }
    
    int[] intersection(int[] nums_long,int[] nums_short) {
        Map<Integer,Integer> numMap = new HashMap<>();
        for(int i=0;i<nums_short.length;i++) {
            numMap.put(nums_short[i],numMap.getOrDefault(nums_short[i],0)+1);
        }
        
        List<Integer> res = new ArrayList<>();
        for(int l=0;l<nums_long.length;l++) {
           if(numMap.containsKey(nums_long[l]) && numMap.get(nums_long[l])>0) {
               numMap.put(nums_long[l],numMap.get(nums_long[l])-1);
               res.add(nums_long[l]);
           }
        }
        
        int[] res_arr = new int[res.size()];
        for(int i=0;i<res.size();i++) {
            res_arr[i]=res.get(i);
        }
        return res_arr;
    }