/** 141. Linked List Cycle
 *  Reverse the links in the linked list while iterating
 *  once back to head, which indicates there is a circle
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null) return false;
        
        ListNode p1 = head;
        ListNode p2 = p1.next;
        ListNode p3 = null;
        while(p2!=null) {
            if(p2==head) return true;
            p1.next = p3;
            p3 = p2.next;
            if(p3==head) return true;
            p2.next = p1;
            
            p1=p3;
            p3=p2;
            if(p1==null) return false;
            p2=p1.next;
        }
        return false;
    }
}

/**
 *if there is circle, the two pointers move in same direction with different steps  
 * will always come accross at some point in a circle.
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null) return false;
        ListNode walker = head;
        ListNode runner = head;
        
        while(runner.next!=null && runner.next.next!=null) {
            walker = walker.next;
            runner = runner.next.next;
            if(runner==walker) return true;
        }
        return false;
    }
}