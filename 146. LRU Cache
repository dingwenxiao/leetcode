
//hash map + Queue (doubly linked list)
//>5hs to pass, because of time exceed error. it is caused by set() part.After optimize set() function, it passed.
public class LRUCache {
    int capacity;
    int curNum;
    Map<Integer, Node> map;
    Node head;
    Node tail;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.curNum = 0;
        this.map = new HashMap<>();
        this.head = new Node(0, 0);//psudo head

        tail=head;
    }

    private void removeNode(Node node) {
        node.pre.next = node.next;
        node.next.pre = node.pre;
    }

    private void moveToTail(Node node) {
            node.pre = tail;
            tail.next = node;
            node.next = null;
            tail = node;
    }

    public int get(int key) {
        if (map.containsKey(key)) {
            Node node = (Node) map.get(key);
            if(node!=tail) {//if it is tail, no need to move
                removeNode(node);
                moveToTail(node);
            }
            return node.value;
        } else {
            return -1;
        }
    }

    public void set(int key, int value) {
            Node node;
            if (map.containsKey(key)) {
                //remove the existing node
                node = map.get(key);
                node.value = value;
                if(node!=tail) {//if it is tail, no need to move
                    removeNode(node);
                    moveToTail(node);
                }
            } else {
                node = new Node(key, value);
                moveToTail(node);
                map.put(key, node);
                if (map.size() > capacity) {
                    map.remove(head.next.key);
                    removeNode(head.next);
                } 
            }
    }

}

class Node {

    int key;
    int value;

    Node pre;
    Node next;
    
    Node(int key, int value) {
        this.key = key;
        this.value = value;
    }
}
